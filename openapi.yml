openapi: "3.1.0"
info:
  title: Geode Index
  description: Documentation for the Geode Index API
  version: "1.0.0"

tags:
  - name: mods
    description: Access to Index mods

  - name: user
    description: User management

paths:
  /mods:
    get:
      tags:
        - mods
      summary: Search all mods, paginated
      description: Returns a list of mods, paginated. Does not include about.md and changelog.md. Does not include dependencies and incompatibilities.

      parameters:
        - name: query
          in: query
          description: Search query
          schema:
            type: string
        - name: gd
          in: query
          description: Geometry Dash version
          required: true
          schema:
            $ref: "#/components/schemas/GDVersionString"
        - name: platforms
          in: query
          description: Platforms that mods have to support, comma separated [win,android32,android64,mac,ios]
          example: "win,android32,android64"
          schema:
            type: string
        - $ref: "#/components/parameters/GeodeVersionQuery"
        - $ref: "#/components/parameters/Page"
        - $ref: "#/components/parameters/PerPage"

      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Mod"
        "500":
          $ref: "#/components/responses/InternalServerError"
    post:
      tags:
        - mods
      summary: Create a new mod
      description: This endpoint is only used for adding a new mod. For creating a new version, use the POST /mods/{id}/versions endpoint.
      security:
        - bearerAuth: []

      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                download_link:
                  type: string
                  description: The download URL for the .geode file. You can use a Github Release for this.
                  examples:
                    - "https://github.com/geode-sdk/NodeIDs/releases/download/v1.0.0/geode.node-ids.geode"
                    - "https://github.com/geode-sdk/DevTools/releases/download/v1.3.0/geode.devtools.geode"

      responses:
        "204":
          description: No Content (Mod created)
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "500":
          $ref: "#/components/responses/InternalServerError"

  /mods/{id}:
    get:
      tags:
        - "mods"
      summary: Get info for a mod
      description: Returns info for the mod, without dependencies and incompatibilities
      parameters:
        - $ref: "#/components/parameters/ModID"

  /mods/{id}/latest:
    get:
      tags:
        - mods
      summary: Get info for the latest version of a mod (NOT YET IMPLEMENTED)
      description: Returns info for the current latest version of the mod
      parameters:
        - $ref: "#/components/parameters/ModID"

      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ModVersion"

  /mods/{id}/versions:
    post:
      tags:
        - mods
      summary: Create a new version of a mod
      description: This endpoint is only used for adding a new version of a mod. For creating a new mod, use the POST /mods endpoint.
      security:
        - bearerAuth: []

      parameters:
        - $ref: "#/components/parameters/ModID"

      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                download_link:
                  type: string
                  description: The download URL for the .geode file. You can use a Github Release for this.
                  examples:
                    - "https://github.com/geode-sdk/NodeIDs/releases/download/v1.0.0/geode.node-ids.geode"
      responses:
        "204":
          description: No Content (Mod version created)
        "400":
          $ref: "#/components/responses/BadRequest"
        "404":
          $ref: "#/components/responses/NotFoundError"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "500":
          $ref: "#/components/responses/InternalServerError"

  /mods/{id}/versions/{version}:
    get:
      tags:
        - mods
      summary: Get info for a specific version of a mod
      parameters:
        - $ref: "#/components/parameters/ModID"
        - $ref: "#/components/parameters/ModVersion"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ModVersion"
        "404":
          $ref: "#/components/responses/NotFoundError"
        "500":
          $ref: "#/components/responses/InternalServerError"

  /mods/{id}/versions/{version}/download:
    get:
      tags:
        - mods
      summary: Download a specific version of a mod
      parameters:
        - $ref: "#/components/parameters/ModID"
        - $ref: "#/components/parameters/ModVersion"
      responses:
        "302":
          description: Redirect to the actual mod download link
        "404":
          $ref: "#/components/responses/NotFoundError"
        "500":
          $ref: "#/components/responses/InternalServerError"

  /mods/updates:
    post:
      tags:
        - mods
      summary: Get available mod updates (NOT IMPLEMENTED)
      description: This is only POST because i want it to have a body

      parameters:
        - name: platform
          in: query
          required: false
          schema:
            $ref: "#/components/schemas/Platform"
        - $ref: "#/components/parameters/GeodeVersionQuery"

      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                type: object
                properties:
                  id:
                    $ref: "#/components/schemas/ModID"
                  version:
                    $ref: "#/components/schemas/ModVersionString"

      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: string

  # /users/{id}:

  #   get:
  #     tags:
  #       - user
  #     parameters:
  #       - name: id
  #         in: path
  #         required: true
  #         schema:
  #           type: integer
  #     summary: Get information about a user
  #     responses:
  #       "200":
  #         description: OK
  #         content:
  #           application/json:
  #             schema:
  #               $ref: "#/components/schemas/User"

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: uuid
  schemas:
    ModID:
      type: string
      pattern: '[a-z0-9_\-]+\.[a-z0-9_\-]+'
      description: Mod ID
      examples:
        - geode.devtools
        - mat.circle-tool

    ModVersionString:
      type: string
      pattern: '^v?\d+\.\d+\.\d+(?:-.+)?$'
      examples:
        - v1.0.0
        - v2.3.4
        - 1.3.0
        - v1.0.0-beta

    GDVersionString:
      type: string
      examples:
        - 2.200
        - 2.204
        - 2.205

    GDVersionObject:
      type: object
      properties:
        win:
          anyOf:
            - type: "null"
            - $ref: "#/components/schemas/GDVersionString"
        mac:
          oneOf:
            - type: "null"
            - $ref: "#/components/schemas/GDVersionString"
        ios:
          oneOf:
            - type: "null"
            - $ref: "#/components/schemas/GDVersionString"
        android32:
          oneOf:
            - type: "null"
            - $ref: "#/components/schemas/GDVersionString"
        android64:
          oneOf:
            - type: "null"
            - $ref: "#/components/schemas/GDVersionString"

    UserSimple:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
      required:
        - id
        - name

    User:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
          examples:
            - mat
        github:
          type: string
          description: GitHub username
          examples:
            - matcool
      required:
        - id
        - name

    Mod:
      type: object
      properties:
        id:
          $ref: "#/components/schemas/ModID"
        repository:
          oneOf:
            - type: "null"
            - type: string
          examples:
            - "https://github.com/geode-sdk/geode"
        latest_version:
          $ref: "#/components/schemas/ModVersionString"
        developers:
          type: array
          items:
            $ref: "#/components/schemas/ModDeveloper"
        tags:
          type: array
          items:
            type: string
            examples:
              - "enhancement"
              - "gameplay"
        versions:
          type: array
          items:
            $ref: "#/components/schemas/ModVersion"
        about:
          type: string
          examples:
            - "This mod adds bugfixes to the game"
        changelog:
          type: string
          examples:
            - "Fixed a bug with the mod"
      required:
        - id
        - latest_version

    ModVersion:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
          examples:
            - Devtools
        validated:
          type: boolean
        description:
          type: string
        early_load:
          type: boolean
        api:
          type: boolean
        geode:
          $ref: "#/components/schemas/ModVersionString"
        version:
          $ref: "#/components/schemas/ModVersionString"
        download_link:
          type: string
          examples:
            - "https://api.geode-sdk.com/v1/mods/geode.nodeids/versions/1.0.0/download"
            - "https://api.geode-sdk.com/v1/mods/geode.devtools/versions/1.0.0/download"
        hash:
          type: string
          description: This is generated serverside
          examples:
            - "3c8d6d3d48967758055a5569a24617c3e6fdc456fbf6a4adbf1222954e61b634"
        gd:
          description: The GD version the mod supports (can be specified per platform)
          oneOf:
            - $ref: "#/components/schemas/GDVersionString"
            - $ref: "#/components/schemas/GDVersionObject"
        mod_id:
          $ref: "#/components/schemas/ModID"

    ModDeveloper:
      type: object
      properties:
        id:
          type: integer
        username:
          type: string
          description: The username of the developer. At the moment it's the same as the GitHub username of the developer.
          examples:
            - fleeym
        display_name:
          type: string
          examples:
            - Flame
        verified:
          type: boolean,
          description: Whether the developer can post mods without admin verification
          examples:
            - true
        admin:
          type: boolean,
          description: Whether the developer is an admin (which can verify mods and developers)
          examples:
            - true
        is_owner:
          type: boolean,
          description: Whether the developer is the owner of the mod
          examples:
            - true

    Platform:
      type: string
      enum:
        - win
        - mac
        - android32
        - android64
        - ios
  parameters:
    ModID:
      name: id
      description: Mod ID
      in: path
      required: true
      schema:
        $ref: "#/components/schemas/ModID"

    ModVersion:
      name: version
      description: Mod Version
      in: path
      required: true
      schema:
        $ref: "#/components/schemas/ModVersionString"

    GeodeVersionQuery:
      name: geode
      in: query
      description: Geode version being used
      required: false
      schema:
        $ref: "#/components/schemas/ModVersionString"

    Page:
      name: page
      in: query
      description: Page number
      required: false
      example: 1
      schema:
        type: integer

    PerPage:
      name: per_page
      in: query
      description: Number of elements to fetch per page
      required: false
      example: 10
      schema:
        type: integer
  responses:
    Unauthorized:
      description: Unauthorized
      content:
        application/json:
          schema:
            type: object
            properties:
              error:
                type: string
                example: "You are not authorized to access this resource"
              payload:
                type: "null"
    BadRequest:
      description: Bad request
      content:
        application/json:
          schema:
            type: object
            properties:
              error:
                type: string
              payload:
                type: "null"
    InternalServerError:
      description: Internal Server Error
      content:
        application/json:
          schema:
            type: object
            properties:
              error:
                type: string
              payload:
                type: "null"
    ForbiddenError:
      description: Forbidden
      content:
        application/json:
          schema:
            type: object
            properties:
              error:
                type: string
              payload:
                type: "null"
    NotFoundError:
      description: Not Found
      content:
        application/json:
          schema:
            type: object
            properties:
              error:
                type: string
              payload:
                type: "null"
